trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  JAVA_VERSION: '1.11'
  MAVEN_POM_FILE: 'pom.xml'
  DOCKER_REPOSITORY_NAME: 'azuredevops-demo'   # Set your Docker repo name here
  AWS_REGION: 'us-east-1'
  AWS_CREDENTIALS_SERVICE_CONNECTION: 'aws-azuedevops'
  IMAGE_TAG: '$(Build.BuildId)'

steps:
- task: Maven@3
  inputs:
    mavenPomFile: '$(MAVEN_POM_FILE)'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '$(JAVA_VERSION)'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
    
- script: |
    echo "Source directory: $(Build.SourcesDirectory)"
    echo "Target directory: $(Build.ArtifactStagingDirectory)"
  displayName: 'Debug paths'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(agent.builddirectory)'
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: Docker@2
  inputs:
    containerRegistry: 'docker-connection'
    repository: 'app-test'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: $(IMAGE_TAG)

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'docker images'

- task: ECRPushImage@1
  inputs:
    awsCredentials: '$(AWS_CREDENTIALS_SERVICE_CONNECTION)'
    regionName: '$(AWS_REGION)'
    imageSource: 'imagename'
    sourceImageName: 'app-test'
    sourceImageTag: '$(IMAGE_TAG)'
    repositoryName: '$(DOCKER_REPOSITORY_NAME)'
    pushTag: '$(Build.BuildId)'
    forceDockerNamingConventions: true
